---

- name: Add Port for Jenkins
  command: sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp 

- name: Reload firewall for after port opening
  command: sudo firewall-cmd --reload   

- name: install wget
  package:
    name: wget
    state: present
    use: yum

- name: install openjdk
  package:
    name: java-1.8.0-openjdk
    state: present

- name: download jenkins.repo
  get_url:
    url: http://pkg.jenkins-ci.org/redhat/jenkins.repo
    dest: /etc/yum.repos.d/jenkins.repo

- name: import jenkins key
  rpm_key:
    state: present
    key: http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key

- name: Ensure Jenkins is Installed
  yum :
        name: jenkins
        update_cache: yes
        state: present
- name: start jenkins
  systemd:
    name: jenkins
    state: started

- name: enable jenkins
  systemd:
    name: jenkins
    enabled: true

- name: sleep for 60 seconds and continue with play
  wait_for: timeout=60

- name: read admin pwd
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpwd

- name: unlock and add admin user
  jenkins_script:
     script: |
      import hudson.security.*
      import jenkins.model.*

      def instance = Jenkins.getInstance()
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)
      def users = hudsonRealm.getAllUsers()
      users_s = users.collect { it.toString() }

      // Create the admin user account if it doesn't already exist.
      if ("{{ jenkins_admin_username }}" in users_s) {
        println "Admin user already exists - updating password"

       def user = hudson.model.User.get('{{ jenkins_admin_username }}');
       def password = hudson.security.HudsonPrivateSecurityRealm.Details.fromPlainPassword('{{ jenkins_admin_password }}')
         user.addProperty(password)
         user.save()
        }
      else {
       println "--> creating local admin user"

       hudsonRealm.createAccount('{{ jenkins_admin_username }}', '{{ jenkins_admin_password }}')
       instance.setSecurityRealm(hudsonRealm)
 
       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
       instance.setAuthorizationStrategy(strategy)
       instance.save()
       }
     args:
      jenkins_admin_username: "{{ jenkins_admin_username }}"
      jenkins_admin_password: "{{ jenkins_admin_password }}"
     user: "{{ jenkins_admin_username }}"
     password: "{{ adminpwd.stdout }}"

- name: fix a defect to disable setup wizard
  jenkins_script:
    script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      }
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"

- name: start jenkins
  systemd:
    name: jenkins
    state: restarted

- name: sleep for 60 seconds and continue with play
  wait_for: timeout=60

- name: Install Jenkins plugins using password.
  jenkins_plugin:
    name: "{{ item }}"
    jenkins_home: "{{ jenkins_home }}"
    url_username: "{{ jenkins_admin_username }}"
    url_password: "{{ jenkins_admin_password }}"
    state: "{{ jenkins_plugins_state }}"
    timeout: "{{ jenkins_plugin_timeout }}"
  with_items: "{{ jenkins_plugins }}"
  when: jenkins_admin_password != ""
  ignore_errors: yes

- name: start jenkins
  systemd:
    name: jenkins
    state: restarted